{"version":3,"sources":["hooks/useLogRows.ts","components/ShowColumns.tsx","components/TaskSheet.tsx","components/LogTable.tsx","components/LogPlayer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["flattenObject","ob","toReturn","i","hasOwnProperty","flatObject","x","String","getlogRows","logRaws","map","log","index","_id","datumType","timestamp","value","replaceAll","JSON","parse","e","console","useLogRows","fileName","useState","logData","setLogData","logColumns","useMemo","reduce","acc","row","keys","Object","_","union","useEffect","a","readRemoteFile","worker","complete","results","data","logRows","item","pick","res","ac","logs","assign","download","getLogs","datumTypes","columnData","title","key","selectable","children","ShowColumns","originalLogColumns","setShowColumnIndex","setShowRowIndex","setCol","setDatumTypes","onCheckColumn","useCallback","checked","allChecked","halfCheckedKeys","columns","uniq","filter","col","includes","split","onSelectColumn","selected","className","checkable","treeData","onCheck","onSelect","defaultExpandedKeys","TaskSheet","rowIndex","setRowIndex","taskData","setTaskData","onClick","prev","dayjs","extend","localizedFormat","Styles","styled","div","CustomRow","passed","CustomCol","LogTable","sec","sync","start","setSelectedTimestamp","setSync","selectedTimestamp","playerRef","logState","setLogState","showColumnIndex","showRowIndex","initShowColumnIndex","Array","length","fill","showColumns","sort","b","parseInt","rowId","setRowId","onClickRow","current","seekTo","count","setCount","originalCountCol","entries","countBy","selectedCount","find","originalSelectedCount","val","lookup","undefined","Error","total","CellRenderer","columnIndex","style","column","toString","format","passedIndex","setPassedIndex","findIndex","onClickFilter","onSelectAllValues","target","indeterminate","valueList","setValueList","onChangeSearchValue","toLowerCase","height","width","rowHeight","fixedColumnCount","fixedRowCount","cellRenderer","border","styleTopLeftGrid","borderBottom","borderRight","fontWeight","rowCount","Boolean","columnCount","columnWidth","scrollToRow","size","onChange","every","some","LogPlayer","url","setSec","setStart","playedSec","setPlayedSec","controls","onProgress","Math","floor","playedSeconds","progressInterval","ref","App","linked","setLinked","useRef","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d2a5951.chunk.js","sourcesContent":["import _ from \"lodash\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { readRemoteFile } from \"react-papaparse\";\n\nfunction flattenObject(ob: any) {\n  var toReturn: any = {};\n\n  for (var i in ob) {\n    if (!ob.hasOwnProperty(i)) continue;\n\n    if (typeof ob[i] == \"object\" && ob[i] !== null) {\n      var flatObject = flattenObject(ob[i]);\n      for (var x in flatObject) {\n        if (!flatObject.hasOwnProperty(x)) continue;\n\n        toReturn[i + \"_\" + x] = flatObject[x];\n      }\n    } else {\n      toReturn[i] = String(ob[i]);\n    }\n  }\n  return toReturn;\n}\n\nconst getlogRows = (logRaws: string[][]) =>\n  logRaws.map<{ [index: string]: string }>((log, index) => {\n    const _id = log[0];\n    const datumType = log[1];\n    const timestamp = log[5];\n    const value = log[8]?.replaceAll('\"\"', '\"').replaceAll(': \", ', ': \"\", ');\n    try {\n      return { timestamp, _id, datumType, ...flattenObject(JSON.parse(value)) };\n    } catch (e) {\n      console.log(e);\n      return { timestamp, _id, datumType };\n    }\n  });\n\nconst getColumns = (data: { [index: string]: string }[]) => {\n  return data.reduce<string[]>((acc, row) => {\n    const keys = Object.keys(row);\n    return _.union(acc, keys);\n  }, []);\n};\n\nfunction useLogRows(fileName: string) {\n  const [logData, setLogData] = useState<{ [index: string]: string }[]>([]);\n  const logColumns = useMemo(() => getColumns(logData), [logData]);\n  useEffect(() => {\n    async function getLogs() {\n      readRemoteFile<string[]>(\n        `${\n          process.env.NODE_ENV === \"development\"\n            ? \"http://localhost:3000/abc-analyzer\"\n            : \"https://wooogler.github.io/abc-analyzer\"\n        }/logs/${fileName}`,\n        {\n          worker: true,\n          complete: function (results) {\n            const logColumns = [\n              \"timestamp\",\n              \"datumType\",\n              \"type\",\n              \"name\",\n              \"packageName\",\n              \"currentKey\",\n              \"timeTaken\",\n              \"isPosted\",\n              \"messageBox\",\n              \"presentation\",\n              \"_id\",\n            ];\n            const logRaws = results.data;\n            const logRows = getlogRows(logRaws).map((item) =>\n              _.pick(item, logColumns)\n            );\n            // const logColumns = logRows.reduce<string[]>((acc, row) => {\n            //   const keys = Object.keys(row);\n            //   return _.union(acc, keys);\n            // }, []);\n\n            const res = logColumns.reduce(\n              (ac, a) => ({ ...ac, [a]: \"empty\" }),\n              {}\n            );\n            const logs = logRows.map((item) => Object.assign({}, res, item));\n            setLogData(logs);\n          },\n          download: true,\n        }\n      );\n    }\n    getLogs();\n  }, [fileName]);\n\n  return { logData, logColumns };\n}\n\nexport default useLogRows;\n","import { Tree } from \"antd\";\nimport { DataNode } from \"antd/lib/tree\";\nimport _ from \"lodash\";\nimport React, { ReactElement, useCallback } from \"react\";\n\ninterface Props {\n  originalLogColumns: string[];\n  setShowColumnIndex: React.Dispatch<React.SetStateAction<boolean[]>>;\n  setShowRowIndex: React.Dispatch<React.SetStateAction<boolean[]>>;\n  setCol: React.Dispatch<React.SetStateAction<string>>;\n  setDatumTypes: React.Dispatch<React.SetStateAction<string[]>>;\n  logData: {\n    [index: string]: string;\n  }[];\n}\n\nconst datumTypes = [\n  \"APP_USAGE_EVENT\",\n  \"KEY_LOG\",\n  \"NOTIFICATION\",\n  \"MESSAGE\",\n  \"CALL_LOG\",\n  \"MEDIA\",\n];\n\nconst columnData: DataNode[] = [\n  {\n    title: \"APP_USAGE_EVENT\",\n    key: \"APP_USAGE_EVENT\",\n    selectable: false,\n    children: [\n      { title: \"name\", key: \"app-name\" },\n      { title: \"packageName\", key: \"app-packageName\" },\n      { title: \"type\", key: \"app-type\" },\n    ],\n  },\n  {\n    title: \"KEY_LOG\",\n    key: \"KEY_LOG\",\n    selectable: false,\n    children: [\n      { title: \"name\", key: \"key-name\" },\n      { title: \"packageName\", key: \"key-packageName\" },\n      { title: \"currentKey\", key: \"key-currentKey\" },\n      { title: \"timeTaken\", key: \"key-timeTaken\" },\n    ],\n  },\n  {\n    title: \"NOTIFICATION\",\n    key: \"NOTIFICATION\",\n    selectable: false,\n    children: [\n      { title: \"name\", key: \"noti-name\" },\n      { title: \"packageName\", key: \"noti-packageName\" },\n      { title: \"isPosted\", key: \"noti-isPosted\" },\n    ],\n  },\n  {\n    title: \"MESSAGE\",\n    key: \"MESSAGE\",\n    selectable: false,\n    children: [{ title: \"messageBox\", key: \"msg-messageBox\" }],\n  },\n  {\n    title: \"CALL_LOG\",\n    key: \"CALL_LOG\",\n    selectable: false,\n    children: [\n      { title: \"type\", key: \"call-type\" },\n      { title: \"presentation\", key: \"call-presentation\" },\n    ],\n  },\n  {\n    title: \"MEDIA\",\n    key: \"MEDIA\",\n    selectable: false,\n  },\n];\n\nfunction ShowColumns({\n  originalLogColumns,\n  setShowColumnIndex,\n  setShowRowIndex,\n  setCol,\n  setDatumTypes,\n  logData,\n}: Props): ReactElement {\n  const onCheckColumn = useCallback(\n    (checked, item) => {\n      const allChecked: string[] = [...checked, ...item.halfCheckedKeys];\n      const columns: string[] = [\n        \"timestamp\",\n        \"_id\",\n        \"datumType\",\n        ..._.uniq<string>(\n          allChecked\n            .filter((col: string) => col.includes(\"-\"))\n            .map((col: string) => col.split(\"-\")[1])\n        ),\n      ];\n      setShowRowIndex(logData.map((row) => allChecked.includes(row.datumType)));\n      setShowColumnIndex(\n        originalLogColumns.map((col) => columns.includes(col))\n      );\n      setDatumTypes(\n        allChecked.filter((col: string) => datumTypes.includes(col))\n      );\n    },\n    [\n      logData,\n      originalLogColumns,\n      setDatumTypes,\n      setShowColumnIndex,\n      setShowRowIndex,\n    ]\n  );\n  const onSelectColumn = useCallback(\n    (selected) => {\n      setCol(selected[0].split(\"-\")[1]);\n    },\n    [setCol]\n  );\n  return (\n    <div className=\"h-60 overflow-auto\">\n      <Tree\n        checkable\n        treeData={columnData}\n        onCheck={onCheckColumn}\n        onSelect={onSelectColumn}\n        defaultExpandedKeys={[\"all\"]}\n      />\n    </div>\n  );\n}\n\nexport default ShowColumns;\n","import { Button } from \"antd\";\nimport React, { ReactElement, useState } from \"react\";\nimport SpreadSheet, { Matrix, Point } from \"react-spreadsheet\";\n\ninterface Props {\n  timestamp: string;\n}\n\nfunction TaskSheet({ timestamp }: Props): ReactElement {\n  const [rowIndex, setRowIndex] = useState<number>(0);\n\n  const [taskData, setTaskData] = useState<Matrix<{ value: string | null }>>([\n    [{ value: \"Phone receive\" }, { value: null }],\n    [{ value: \"SMS reply (장소)\" }, { value: null }],\n    [{ value: \"SMS reply (시간)\" }, { value: null }],\n    [{ value: \"SMS reply (요일)\" }, { value: null }],\n    [{ value: \"SMS reply (타이핑)\" }, { value: null }],\n    [{ value: \"Camera (순서)\" }, { value: null }],\n    [{ value: \"Camera (삭제)\" }, { value: null }],\n    [{ value: \"Location (장소 경로 링크)\" }, { value: null }],\n    [{ value: \"Location (평점)\" }, { value: null }],\n    [{ value: \"Location (문자 받는 사람)\" }, { value: null }],\n    [{ value: \"Location (송금액)\" }, { value: null }],\n  ]);\n  const onClickCopy = () => {\n    setTaskData((prev) => {\n      return prev?.map((row, index) => {\n        if (index === rowIndex) {\n          return [row[0], { value: timestamp }];\n        }\n        return row;\n      });\n    });\n  };\n  const onSelectCell = (selected: Point[]) => {\n    if (selected !== [] && selected[0]) {\n      console.log(selected);\n      setRowIndex(selected[0].row);\n    }\n  };\n  return (\n    <>\n      <div className=\"flex\">\n        <div className=\"text-lg font-bold\">Task Sheet</div>\n        <Button className=\"ml-auto\" onClick={onClickCopy}>\n          Copy Timestamp\n        </Button>\n      </div>\n      <div className=\"h-60 overflow-auto\">\n        <SpreadSheet data={taskData} onSelect={onSelectCell} />\n      </div>\n    </>\n  );\n}\n\nexport default TaskSheet;\n","import React, { ReactElement, useCallback, useEffect, useState } from \"react\";\nimport { AutoSizer, GridCellRenderer, MultiGrid } from \"react-virtualized\";\nimport dayjs from \"dayjs\";\nimport localizedFormat from \"dayjs/plugin/localizedFormat\";\nimport useLogRows from \"../hooks/useLogRows\";\nimport styled from \"styled-components\";\nimport _ from \"lodash\";\nimport { Checkbox, Input, Tooltip } from \"antd\";\nimport { CheckboxChangeEvent } from \"antd/lib/checkbox\";\nimport ShowColumns from \"./ShowColumns\";\nimport TaskSheet from \"./TaskSheet\";\n\ninterface Props {\n  fileName: string;\n  sec: number;\n  sync: number;\n  start: number;\n  selectedTimestamp: number;\n  setSync: React.Dispatch<React.SetStateAction<number>>;\n  setSelectedTimestamp: React.Dispatch<React.SetStateAction<number>>;\n  playerRef: any | undefined;\n}\n\ninterface ValueCount {\n  value: string;\n  count: number;\n  checked: boolean;\n  total: number;\n}\n\ndayjs.extend(localizedFormat);\n\nfunction LogTable({\n  fileName,\n  sec,\n  sync,\n  start,\n  setSync,\n  setSelectedTimestamp,\n  selectedTimestamp,\n  playerRef,\n}: Props): ReactElement {\n  const { logData, logColumns: originalLogColumns } = useLogRows(fileName);\n  const [logState, setLogState] = useState<\n    {\n      [index: string]: string;\n    }[]\n  >();\n  const [showColumnIndex, setShowColumnIndex] = useState<boolean[]>([]);\n  const [showRowIndex, setShowRowIndex] = useState<boolean[]>([]);\n  useEffect(() => {\n    const initShowColumnIndex = new Array(originalLogColumns.length).fill(true);\n    // .map((_, index) => (index === 1 ? false : true));\n    setShowColumnIndex(initShowColumnIndex);\n    setShowRowIndex(new Array(logData.length).fill(false));\n  }, [logData.length, originalLogColumns.length]);\n  useEffect(() => {\n    const showColumns = originalLogColumns.filter((_, i) => showColumnIndex[i]);\n    setLogState(\n      logData\n        .map((item) => _.pick(item, showColumns))\n        .filter((_, i) => showRowIndex[i])\n        .sort((a, b) => parseInt(a.timestamp) - parseInt(b.timestamp))\n    );\n  }, [logData, originalLogColumns, showColumnIndex, showRowIndex]);\n\n  const [rowId, setRowId] = useState(\"\");\n\n  const onClickRow = useCallback(\n    (row: { [index: string]: string }) => {\n      setRowId(row?._id);\n      const timestamp = parseInt(row?.timestamp);\n      setSelectedTimestamp(timestamp);\n      if (playerRef) {\n        playerRef.current.seekTo((start + timestamp - sync) / 1000, \"seconds\");\n      }\n    },\n    [playerRef, setSelectedTimestamp, start, sync]\n  );\n\n  const [col, setCol] = useState(\"\");\n  const [datumTypes, setDatumTypes] = useState<string[]>([]);\n  const [count, setCount] = useState<ValueCount[] | undefined>([]);\n\n  useEffect(() => {\n    const logs = logData.filter((log) => datumTypes.includes(log.datumType));\n    const originalCountCol = originalLogColumns.map((col) => ({\n      col,\n      count: Object.entries(_.countBy(logs?.map((item) => item[col]))),\n    }));\n    const countCol = originalLogColumns.map((col) => ({\n      col,\n      count: Object.entries(_.countBy(logState?.map((item) => item[col]))),\n    }));\n    const selectedCount = countCol.find((item) => item.col === col)?.count;\n    const originalSelectedCount = originalCountCol.find(\n      (item) => item.col === col\n    )?.count;\n\n    setCount(\n      originalSelectedCount?.map((item) => {\n        if (selectedCount?.map((val) => val[0]).includes(item[0])) {\n          const lookup = selectedCount.find((val) => val[0] === item[0]);\n          if (lookup === undefined) {\n            throw new Error(\"no lookup\");\n          }\n          const count = lookup[1];\n          if (count === item[1]) {\n            return {\n              value: item[0],\n              count: count,\n              checked: true,\n              total: item[1],\n            };\n          }\n          return {\n            value: item[0],\n            count: count,\n            checked: false,\n            total: item[1],\n          };\n        } else {\n          return { value: item[0], count: 0, checked: false, total: item[1] };\n        }\n      })\n    );\n  }, [col, datumTypes, logData, logState, originalLogColumns]);\n\n  const CellRenderer: GridCellRenderer = ({\n    columnIndex,\n    key,\n    rowIndex,\n    style,\n  }) => {\n    if (logState) {\n      const logColumns = originalLogColumns.filter(\n        (_, index) => showColumnIndex[index]\n      );\n      const column = logColumns[columnIndex];\n      const row = logState[rowIndex];\n      if (rowIndex === 0) {\n        return (\n          <CustomCol key={key} style={style} className=\"cell\">\n            {column}\n          </CustomCol>\n        );\n      }\n\n      const value =\n        columnIndex !== 0\n          ? row && row[column] && row[column].toString()\n          : row && dayjs(parseInt(row[column])).format(\"MM/DD hh:mm:ss.SSS\");\n\n      return (\n        <CustomRow\n          key={key}\n          style={style}\n          className=\"cell\"\n          passed={sec + sync - start >= parseInt(row?.timestamp)}\n          selected={row?._id === rowId}\n          onClick={() => onClickRow(row)}\n        >\n          <Tooltip title={value}>{value}</Tooltip>\n        </CustomRow>\n      );\n    }\n  };\n  const [passedIndex, setPassedIndex] = useState(0);\n  useEffect(() => {\n    const rowIndex = logState\n      ? logState.findIndex(\n          (item) => sec + sync - start <= parseInt(item?.timestamp)\n        )\n      : 0;\n    setPassedIndex(rowIndex + 5);\n  }, [logState, sec, start, sync]);\n\n  const onClickFilter = useCallback(\n    (value: string, checked: boolean) => {\n      if (checked) {\n        setShowRowIndex((prev) =>\n          prev.map((item, i) => {\n            if (item === true && datumTypes.includes(logData[i].datumType)) {\n              return logData[i][col] !== value;\n            } else {\n              return item;\n            }\n          })\n        );\n      } else {\n        setShowRowIndex((prev) =>\n          prev.map((item, i) => {\n            if (item === false && datumTypes.includes(logData[i].datumType)) {\n              return logData[i][col] === value;\n            } else {\n              return item;\n            }\n          })\n        );\n      }\n    },\n    [col, datumTypes, logData]\n  );\n\n  const onSelectAllValues = useCallback((e: CheckboxChangeEvent) => {\n    if (!e.target.checked || e.target.indeterminate) {\n      setShowRowIndex((prev) => prev.map(() => false));\n    } else {\n      setShowRowIndex((prev) => prev.map(() => true));\n    }\n  }, []);\n\n  const [valueList, setValueList] = useState<ValueCount[] | undefined>([]);\n\n  useEffect(() => {\n    setValueList(count);\n  }, [count, originalLogColumns]);\n\n  const onChangeSearchValue: React.ChangeEventHandler<HTMLInputElement> =\n    useCallback(\n      (e) => {\n        setValueList(\n          count?.filter((item) =>\n            item.value.toLowerCase().includes(e.target.value.toLowerCase())\n          )\n        );\n      },\n      [count]\n    );\n\n  return (\n    <div className=\"w-full h-screen\">\n      {/* <div>\n        sec:{sec}, sync: {sync}, timestamp: {selectedTimestamp}, start: {start},\n        sec+sync: {sec + sync}\n      </div> */}\n      <Styles>\n        <AutoSizer>\n          {({ height, width }) => (\n            <MultiGrid\n              height={height}\n              rowHeight={30}\n              width={width}\n              fixedColumnCount={1}\n              fixedRowCount={1}\n              cellRenderer={CellRenderer}\n              style={{\n                border: \"1px solid #ddd\",\n              }}\n              styleTopLeftGrid={{\n                borderBottom: \"2px solid #aaa\",\n                borderRight: \"2px solid #aaa\",\n                fontWeight: \"bold\",\n              }}\n              rowCount={showRowIndex.filter(Boolean).length}\n              columnCount={showColumnIndex.filter(Boolean).length}\n              columnWidth={200}\n              scrollToRow={passedIndex}\n            />\n          )}\n        </AutoSizer>\n      </Styles>\n      <div className=\"flex\">\n        <div className=\"flex flex-col ml-4\">\n          <div className=\"text-lg font-bold\">Show Columns</div>\n          <ShowColumns\n            originalLogColumns={originalLogColumns}\n            setShowColumnIndex={setShowColumnIndex}\n            setCol={setCol}\n            logData={logData}\n            setDatumTypes={setDatumTypes}\n            setShowRowIndex={setShowRowIndex}\n          />\n        </div>\n        {(col !== \"\" || valueList?.length === 0) && (\n          <div className=\"flex flex-col ml-4\">\n            <div className=\"text-lg font-bold\">Column Filter - {col}</div>\n            <Input size=\"small\" onChange={onChangeSearchValue} />\n            <div className=\"p-1\">\n              <Checkbox\n                checked={count\n                  ?.map((item) => item.checked)\n                  .every((item) => item === true)}\n                indeterminate={\n                  !count\n                    ?.map((item) => item.checked)\n                    .every((item) => item === true) &&\n                  count\n                    ?.map((item) => item.checked)\n                    .some((item) => item === true)\n                }\n                onChange={onSelectAllValues}\n              >\n                Select All\n              </Checkbox>\n            </div>\n            <div className=\"h-60 overflow-auto\">\n              {valueList\n                ?.sort((a, b) => b.total - a.total)\n                .map((item, index) => {\n                  return (\n                    <div className=\"p-1\" key={index}>\n                      <Checkbox\n                        checked={item.checked}\n                        indeterminate={item.count !== 0 && !item.checked}\n                        onClick={() => onClickFilter(item.value, item.checked)}\n                      >\n                        {item.value} ({item.count}/{item.total})\n                      </Checkbox>\n                    </div>\n                  );\n                })}\n            </div>\n          </div>\n        )}\n        <div className=\"ml-auto\">\n          <TaskSheet timestamp={selectedTimestamp.toString()} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst Styles = styled.div`\n  width: 100%;\n  height: 60%;\n  margin: 1rem;\n  .cell {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;\n\nconst CustomRow = styled.div<{ passed: boolean; selected: boolean }>`\n  ${({ passed }) =>\n    passed &&\n    `\n    background: yellow;\n  `}\n  ${({ selected }) =>\n    selected &&\n    `\n    background: red;\n  `}\n`;\n\nconst CustomCol = styled.div``;\n\nexport default LogTable;\n","import { Button } from \"antd\";\nimport React, { ReactElement, useCallback, useState } from \"react\";\nimport ReactPlayer from \"react-player\";\n\ninterface Props {\n  url: string;\n  setSec: React.Dispatch<React.SetStateAction<number>>;\n  setSync: React.Dispatch<React.SetStateAction<number>>;\n  setStart: React.Dispatch<React.SetStateAction<number>>;\n  selectedTimestamp: number;\n  playerRef: React.LegacyRef<ReactPlayer> | undefined;\n}\n\ninterface Progress {\n  played: number;\n  playedSeconds: number;\n  loaded: number;\n  loadedSeconds: number;\n}\n\nfunction LogPlayer({\n  url,\n  setSec,\n  setSync,\n  setStart,\n  selectedTimestamp,\n  playerRef,\n}: Props): ReactElement {\n  const [playedSec, setPlayedSec] = useState(0);\n  const onProgress = (e: Progress) => {\n    setSec(Math.floor(e.playedSeconds * 1000));\n    setPlayedSec(Math.floor(e.playedSeconds * 1000));\n  };\n  const onClickSync = useCallback(() => {\n    setSync(selectedTimestamp);\n    setStart(playedSec);\n  }, [playedSec, selectedTimestamp, setStart, setSync]);\n  return (\n    <div className=\"h-screen w-full p-4\">\n      <ReactPlayer\n        url={url}\n        controls={true}\n        width=\"100%\"\n        height=\"100%\"\n        onProgress={onProgress}\n        progressInterval={10}\n        ref={playerRef}\n      />\n      {/* <div>{playedSec}</div> */}\n      {/* <Button onClick={onClickSync}>Sync</Button> */}\n    </div>\n  );\n}\n\nexport default LogPlayer;\n","import React, { useRef, useState } from \"react\";\n\nimport LogTable from \"./components/LogTable\";\nimport \"antd/dist/antd.css\";\nimport LogPlayer from \"./components/LogPlayer\";\nimport ReactPlayer from \"react-player\";\nimport { Switch } from \"antd\";\n\nfunction App() {\n  const [linked, setLinked] = useState<boolean>(true);\n  const [sync, setSync] = useState<number>(1629813828796);\n  const [sec, setSec] = useState<number>(0);\n  const [start, setStart] = useState<number>(6835);\n  const [selectedTimestamp, setSelectedTimestamp] = useState<number>(0);\n  const playerRef = useRef() as React.LegacyRef<ReactPlayer> | undefined;\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <div className=\"w-2/3 h-screen\">\n        <LogTable\n          fileName=\"20.4.csv\"\n          sec={linked ? sec : 0}\n          sync={sync}\n          setSelectedTimestamp={setSelectedTimestamp}\n          playerRef={linked && playerRef}\n          setSync={setSync}\n          selectedTimestamp={selectedTimestamp}\n          start={start}\n        />\n      </div>\n      <div className=\"w-1/3 h-screen\">\n        <div className=\"flex justify-center\">\n          <div className=\"mr-2\">Link:</div>\n          <Switch checked={linked} onChange={(checked) => setLinked(checked)} />\n        </div>\n        <LogPlayer\n          url={`${\n            process.env.NODE_ENV === \"development\" ? \"abc-analyzer/\" : \"\"\n          }videos/P020_10.webm`}\n          setSec={setSec}\n          setSync={setSync}\n          setStart={setStart}\n          selectedTimestamp={selectedTimestamp}\n          playerRef={playerRef}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}