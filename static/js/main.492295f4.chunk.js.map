{"version":3,"sources":["hooks/useLogRows.ts","components/LogTable.tsx","components/LogPlayer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["flattenObject","ob","toReturn","i","hasOwnProperty","flatObject","x","getlogRows","logRaws","map","log","index","_id","datumType","timestamp","value","replaceAll","JSON","parse","e","console","useLogRows","fileName","useState","logData","setLogData","logColumns","useMemo","reduce","acc","row","keys","Object","_","union","useEffect","a","readRemoteFile","worker","complete","results","data","logRows","res","ac","logs","item","assign","download","getLogs","Styles","styled","div","CustomRow","passed","selected","CustomCol","LogTable","sec","sync","start","setSelectedTimestamp","setSync","playerRef","selectedTimestamp","originalLogColumns","logState","setLogState","showColumnIndex","setShowColumnIndex","showRowIndex","setShowRowIndex","Array","length","fill","showColumns","filter","pick","sort","b","parseInt","rowId","setRowId","onClickRow","useCallback","current","seekTo","col","setCol","count","setCount","originalCountCol","entries","countBy","selectedCount","find","originalSelectedCount","val","includes","lookup","undefined","Error","onClickCol","CellRenderer","columnIndex","key","rowIndex","style","column","className","onClick","toString","onClickFilter","checked","prev","onSelectAllColumns","target","indeterminate","onSelectAllValues","height","width","rowHeight","fixedColumnCount","fixedRowCount","cellRenderer","border","styleTopLeftGrid","borderBottom","borderRight","fontWeight","rowCount","Boolean","columnCount","columnWidth","every","some","onChange","onChangeColumns","LogPlayer","url","setSec","setStart","playedSec","setPlayedSec","controls","onProgress","Math","floor","playedSeconds","progressInterval","ref","App","useRef","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.492295f4.chunk.js","sourcesContent":["import _ from \"lodash\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { readRemoteFile } from \"react-papaparse\";\n\nfunction flattenObject(ob: any) {\n  var toReturn: any = {};\n\n  for (var i in ob) {\n    if (!ob.hasOwnProperty(i)) continue;\n\n    if (typeof ob[i] == \"object\" && ob[i] !== null) {\n      var flatObject = flattenObject(ob[i]);\n      for (var x in flatObject) {\n        if (!flatObject.hasOwnProperty(x)) continue;\n\n        toReturn[i + \"_\" + x] = flatObject[x];\n      }\n    } else {\n      toReturn[i] = ob[i];\n    }\n  }\n  return toReturn;\n}\n\nconst getlogRows = (logRaws: string[][]) =>\n  logRaws.map<{ [index: string]: string }>((log, index) => {\n    const _id = log[0];\n    const datumType = log[1];\n    const timestamp = log[5];\n    const value = log[8]?.replaceAll('\"\"', '\"').replaceAll(': \", ', ': \"\", ');\n    try {\n      return { timestamp, _id, datumType, ...flattenObject(JSON.parse(value)) };\n    } catch (e) {\n      console.log(e);\n      return { timestamp, _id, datumType };\n    }\n  });\n\nconst getColumns = (data: { [index: string]: string }[]) => {\n  return data.reduce<string[]>((acc, row) => {\n    const keys = Object.keys(row);\n    return _.union(acc, keys);\n  }, []);\n};\n\nfunction useLogRows(fileName: string) {\n  const [logData, setLogData] = useState<{ [index: string]: string }[]>([]);\n  const logColumns = useMemo(() => getColumns(logData), [logData]);\n  useEffect(() => {\n    async function getLogs() {\n      // const response = await fetch(\"logs/\" + fileName);\n      // const reader = response.body?.getReader();\n      // const result = await reader?.read();\n      // const decoder = new TextDecoder(\"utf-8\");\n      // const csv = decoder.decode(result?.value);\n      // const results = Papa.parse<string[]>(csv);\n      // console.log(results);\n      // const logRaws = results.data;\n      readRemoteFile<string[]>(\"http://localhost:3000/logs/\" + fileName, {\n        worker: true,\n        complete: function (results) {\n          console.log(results);\n          const logRaws = results.data;\n          const logRows = getlogRows(logRaws);\n          const logColumns = logRows.reduce<string[]>((acc, row) => {\n            const keys = Object.keys(row);\n            return _.union(acc, keys);\n          }, []);\n          const res = logColumns.reduce(\n            (ac, a) => ({ ...ac, [a]: \"empty\" }),\n            {}\n          );\n          const logs = logRows.map((item) => Object.assign({}, res, item));\n          setLogData(logs);\n        },\n        download: true,\n      });\n      // const logRows = getlogRows(logRaws);\n      // const logColumns = logRows.reduce<string[]>((acc, row) => {\n      //   const keys = Object.keys(row);\n      //   return _.union(acc, keys);\n      // }, []);\n      // const res = logColumns.reduce((ac, a) => ({ ...ac, [a]: \"empty\" }), {});\n      // const logs = logRows.map((item) => Object.assign({}, res, item));\n      // setLogData(logs);\n    }\n    getLogs();\n  }, [fileName]);\n\n  return { logData, logColumns };\n}\n\nexport default useLogRows;\n","import React, { ReactElement, useCallback, useEffect, useState } from \"react\";\nimport { AutoSizer, GridCellRenderer, MultiGrid } from \"react-virtualized\";\nimport useLogRows from \"../hooks/useLogRows\";\nimport Draggable from \"react-draggable\";\nimport styled from \"styled-components\";\nimport _ from \"lodash\";\nimport Item from \"antd/lib/list/Item\";\nimport { Checkbox } from \"antd\";\nimport { CheckboxChangeEvent } from \"antd/lib/checkbox\";\n\ninterface Props {\n  fileName: string;\n  sec: number;\n  sync: number;\n  start: number;\n  selectedTimestamp: number;\n  setSync: React.Dispatch<React.SetStateAction<number>>;\n  setSelectedTimestamp: React.Dispatch<React.SetStateAction<number>>;\n  playerRef: any;\n}\n\nfunction LogTable({\n  fileName,\n  sec,\n  sync,\n  start,\n  setSync,\n  setSelectedTimestamp,\n  selectedTimestamp,\n  playerRef,\n}: Props): ReactElement {\n  const { logData, logColumns: originalLogColumns } = useLogRows(fileName);\n  const [logState, setLogState] = useState<\n    {\n      [index: string]: string;\n    }[]\n  >();\n  const [showColumnIndex, setShowColumnIndex] = useState<boolean[]>([]);\n  const [showRowIndex, setShowRowIndex] = useState<boolean[]>([]);\n\n  useEffect(() => {\n    setShowColumnIndex(new Array(originalLogColumns.length).fill(true));\n    setShowRowIndex(new Array(logData.length).fill(true));\n  }, [logData.length, originalLogColumns.length]);\n\n  useEffect(() => {\n    const showColumns = originalLogColumns.filter((_, i) => showColumnIndex[i]);\n    setLogState(\n      logData\n        .map((item) => _.pick(item, showColumns))\n        .filter((_, i) => showRowIndex[i])\n        .sort((a, b) => parseInt(a.timestamp) - parseInt(b.timestamp))\n    );\n  }, [logData, originalLogColumns, showColumnIndex, showRowIndex]);\n\n  // useEffect(() => {\n  //   const firstTimestamp = logData\n  //     .map((log) => parseInt(log.timestamp))\n  //     .sort()[0];\n  //   setSync(firstTimestamp);\n  // }, [logData, setSync]);\n\n  const [rowId, setRowId] = useState(\"\");\n\n  const onClickRow = useCallback(\n    (row: { [index: string]: string }) => {\n      setRowId(row?._id);\n      const timestamp = parseInt(row?.timestamp);\n      setSelectedTimestamp(timestamp);\n      playerRef.current.seekTo((start + timestamp - sync) / 1000, \"seconds\");\n    },\n    [playerRef, setSelectedTimestamp, start, sync]\n  );\n\n  const [col, setCol] = useState(\"\");\n  const [count, setCount] = useState<\n    [string, number, boolean, number][] | undefined\n  >([]);\n\n  useEffect(() => {\n    const originalCountCol = originalLogColumns.map((col) => ({\n      col,\n      count: Object.entries(_.countBy(logData?.map((item) => item[col]))),\n    }));\n    const countCol = originalLogColumns.map((col) => ({\n      col,\n      count: Object.entries(_.countBy(logState?.map((item) => item[col]))),\n    }));\n    const selectedCount = countCol.find((item) => item.col === col)?.count;\n    const originalSelectedCount = originalCountCol.find(\n      (item) => item.col === col\n    )?.count;\n\n    setCount(\n      originalSelectedCount?.map((item) => {\n        if (selectedCount?.map((val) => val[0]).includes(item[0])) {\n          const lookup = selectedCount.find((val) => val[0] === item[0]);\n          if (lookup === undefined) {\n            throw new Error(\"no lookup\");\n          }\n          const count = lookup[1];\n          if (count === item[1]) {\n            return [item[0], count, true, item[1]];\n          }\n          return [item[0], count, false, item[1]];\n        } else {\n          return [item[0], 0, false, item[1]];\n        }\n      })\n    );\n  }, [col, logData, logState, originalLogColumns]);\n\n  const onClickCol = useCallback((col: string) => {\n    setCol(col);\n  }, []);\n\n  const CellRenderer: GridCellRenderer = ({\n    columnIndex,\n    key,\n    rowIndex,\n    style,\n  }) => {\n    if (logState) {\n      const logColumns = originalLogColumns.filter(\n        (_, index) => showColumnIndex[index]\n      );\n      const column = logColumns[columnIndex];\n      const row = logState[rowIndex];\n      if (rowIndex === 0) {\n        return (\n          <CustomCol\n            key={key}\n            style={style}\n            className=\"cell\"\n            onClick={() => onClickCol(column)}\n            selected={col === column}\n          >\n            {column}\n          </CustomCol>\n        );\n      }\n      return (\n        <CustomRow\n          key={key}\n          style={style}\n          className=\"cell\"\n          passed={sec + sync - start >= parseInt(row?.timestamp)}\n          selected={row?._id === rowId}\n          onClick={() => onClickRow(row)}\n        >\n          {row && row[column] && row[column].toString()}\n        </CustomRow>\n      );\n    }\n  };\n\n  const onChangeColumns = (index: number) => {\n    setShowColumnIndex((prev) =>\n      prev.map((item, i) => {\n        return index === i ? !item : item;\n      })\n    );\n  };\n\n  const onClickFilter = useCallback(\n    (value: string, checked: boolean) => {\n      if (checked) {\n        setShowRowIndex((prev) =>\n          prev.map((item, i) => {\n            if (item === true) {\n              return logData[i][col] !== value;\n            } else {\n              return item;\n            }\n          })\n        );\n      } else {\n        setShowRowIndex((prev) =>\n          prev.map((item, i) => {\n            if (item === false) {\n              return logData[i][col] === value;\n            } else {\n              return item;\n            }\n          })\n        );\n      }\n    },\n    [col, logData]\n  );\n\n  const onSelectAllColumns = useCallback((e: CheckboxChangeEvent) => {\n    if (!e.target.checked || e.target.indeterminate) {\n      setShowColumnIndex((prev) => prev.map(() => false));\n    } else {\n      setShowColumnIndex((prev) => prev.map(() => true));\n    }\n  }, []);\n\n  const onSelectAllValues = useCallback((e: CheckboxChangeEvent) => {\n    if (!e.target.checked || e.target.indeterminate) {\n      setShowRowIndex((prev) => prev.map(() => false));\n    } else {\n      setShowRowIndex((prev) => prev.map(() => true));\n    }\n  }, []);\n\n  return (\n    <div className=\"w-full h-screen\">\n      {/* <div>\n        sec:{sec}, sync: {sync}, timestamp: {selectedTimestamp}, start: {start},\n        sec+sync: {sec + sync}\n      </div> */}\n      <Styles>\n        <AutoSizer>\n          {({ height, width }) => (\n            <MultiGrid\n              height={height}\n              rowHeight={30}\n              width={width}\n              fixedColumnCount={1}\n              fixedRowCount={1}\n              cellRenderer={CellRenderer}\n              style={{\n                border: \"1px solid #ddd\",\n              }}\n              styleTopLeftGrid={{\n                borderBottom: \"2px solid #aaa\",\n                borderRight: \"2px solid #aaa\",\n                fontWeight: \"bold\",\n              }}\n              rowCount={showRowIndex.filter(Boolean).length}\n              columnCount={showColumnIndex.filter(Boolean).length}\n              columnWidth={150}\n            />\n          )}\n        </AutoSizer>\n      </Styles>\n      <div className=\"flex\">\n        <div className=\"flex flex-col ml-4\">\n          <div className=\"text-lg font-bold\">Show Columns</div>\n          <Checkbox\n            checked={showColumnIndex.every((item) => item === true)}\n            indeterminate={\n              !showColumnIndex.every((item) => item === true) &&\n              showColumnIndex.some((item) => item === true)\n            }\n            onChange={onSelectAllColumns}\n          >\n            Select All\n          </Checkbox>\n          <div className=\"h-1/5 overflow-auto\">\n            {originalLogColumns.map((column, index) => {\n              // if (column === \"_id\") return <div></div>;\n              return (\n                <div>\n                  <Checkbox\n                    onChange={() => onChangeColumns(index)}\n                    checked={showColumnIndex[index]}\n                    key={index}\n                  >\n                    {column}\n                  </Checkbox>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n        {col !== \"\" && (\n          <div className=\"flex flex-col ml-4\">\n            <div className=\"text-lg font-bold\">Column Filter - {col}</div>\n            <Checkbox\n              checked={count\n                ?.map((item) => item[2])\n                .every((item) => item === true)}\n              indeterminate={\n                !count?.map((item) => item[2]).every((item) => item === true) &&\n                count?.map((item) => item[2]).some((item) => item === true)\n              }\n              onChange={onSelectAllValues}\n            >\n              Select All\n            </Checkbox>\n            <div className=\"h-1/5 overflow-auto\">\n              {count\n                ?.sort((a, b) => b[3] - a[3])\n                .map((item) => {\n                  return (\n                    <div>\n                      <Checkbox\n                        checked={item[2]}\n                        indeterminate={item[1] !== 0 && !item[2]}\n                        onClick={() => onClickFilter(item[0], item[2])}\n                        key={item[0]}\n                      >\n                        {item[0]} ({item[1]}/{item[3]})\n                      </Checkbox>\n                    </div>\n                  );\n                })}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst Styles = styled.div`\n  width: 100%;\n  height: 60%;\n  margin: 1rem;\n  .cell {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    :hover {\n      overflow: visible;\n      white-space: normal;\n    }\n  }\n`;\n\nconst CustomRow = styled.div<{ passed: boolean; selected: boolean }>`\n  ${({ passed }) =>\n    passed &&\n    `\n    background: yellow;\n  `}\n  ${({ selected }) =>\n    selected &&\n    `\n    background: red;\n  `}\n`;\n\nconst CustomCol = styled.div<{ selected: boolean }>`\n  ${({ selected }) =>\n    selected &&\n    `\n    background: skyblue;\n  `}\n`;\n\nexport default LogTable;\n","import { Button } from \"antd\";\nimport React, { ReactElement, useCallback, useState } from \"react\";\nimport ReactPlayer from \"react-player\";\n\ninterface Props {\n  url: string;\n  setSec: React.Dispatch<React.SetStateAction<number>>;\n  setSync: React.Dispatch<React.SetStateAction<number>>;\n  setStart: React.Dispatch<React.SetStateAction<number>>;\n  selectedTimestamp: number;\n  playerRef: React.LegacyRef<ReactPlayer> | undefined;\n}\n\ninterface Progress {\n  played: number;\n  playedSeconds: number;\n  loaded: number;\n  loadedSeconds: number;\n}\n\nfunction LogPlayer({\n  url,\n  setSec,\n  setSync,\n  setStart,\n  selectedTimestamp,\n  playerRef,\n}: Props): ReactElement {\n  const [playedSec, setPlayedSec] = useState(0);\n  const onProgress = (e: Progress) => {\n    setSec(Math.floor(e.playedSeconds * 1000));\n    setPlayedSec(Math.floor(e.playedSeconds * 1000));\n  };\n  const onClickSync = useCallback(() => {\n    setSync(selectedTimestamp);\n    setStart(playedSec);\n  }, [playedSec, selectedTimestamp, setStart, setSync]);\n  return (\n    <div className=\"h-screen w-full p-4\">\n      <ReactPlayer\n        url={url}\n        controls={true}\n        width=\"100%\"\n        height=\"100%\"\n        onProgress={onProgress}\n        progressInterval={10}\n        ref={playerRef}\n      />\n      {/* <div>{playedSec}</div> */}\n      {/* <Button onClick={onClickSync}>Sync</Button> */}\n    </div>\n  );\n}\n\nexport default LogPlayer;\n","import React, { useRef, useState } from \"react\";\n\nimport LogTable from \"./components/LogTable\";\nimport \"antd/dist/antd.css\";\nimport LogPlayer from \"./components/LogPlayer\";\nimport ReactPlayer from \"react-player\";\n\nfunction App() {\n  const [sync, setSync] = useState<number>(1629813828796);\n  const [sec, setSec] = useState<number>(0);\n  const [start, setStart] = useState<number>(6835);\n  const [selectedTimestamp, setSelectedTimestamp] = useState<number>(0);\n  const playerRef = useRef() as React.LegacyRef<ReactPlayer> | undefined;\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <div className=\"w-2/3 h-screen\">\n        <LogTable\n          fileName=\"20.4.csv\"\n          sec={sec}\n          sync={sync}\n          setSelectedTimestamp={setSelectedTimestamp}\n          playerRef={playerRef}\n          setSync={setSync}\n          selectedTimestamp={selectedTimestamp}\n          start={start}\n        />\n      </div>\n      <div className=\"w-1/3 h-screen\">\n        <LogPlayer\n          url=\"videos/P020_10.webm\"\n          setSec={setSec}\n          setSync={setSync}\n          setStart={setStart}\n          selectedTimestamp={selectedTimestamp}\n          playerRef={playerRef}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}